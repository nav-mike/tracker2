generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  landingPages  LandingPage[]
  offerPages    OfferPage[]
  campaigns     Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LandingPage {
  id        String   @id @default(cuid())
  name      String
  countries Json
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paths     Path[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visits    Visit[]
}

model OfferPage {
  id        String   @id @default(cuid())
  name      String
  countries Json
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paths     Path[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clicks    Click[]
}

model Path {
  id            String      @id @default(cuid())
  landingPageId String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  offerPageId   String
  offerPage     OfferPage   @relation(fields: [offerPageId], references: [id], onDelete: Cascade)
  campaignId    String
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  visits        Visit[]
  clicks        Click[]
}

model Campaign {
  id        String   @id @default(cuid())
  name      String
  countries Json
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paths     Path[]
  cost      Float    @default(0) // TODO: move to landing page
  revenue   Float    @default(0) // TODO: move to offer page
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visits    Visit[]
  clicks    Click[]
}

model Visit {
  id            String      @id @default(cuid())
  cost          Float       @default(0)
  landingPageId String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  pathId        String
  path          Path        @relation(fields: [pathId], references: [id], onDelete: Cascade)
  campaignId    String
  campaign      Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  country       String
  os            String
  browser       String
  device        String
  createdAt     DateTime    @default(now())
}

model Click {
  id          String    @id @default(cuid())
  cost        Float     @default(0)
  offerPageId String
  offerPage   OfferPage @relation(fields: [offerPageId], references: [id], onDelete: Cascade)
  pathId      String
  path        Path      @relation(fields: [pathId], references: [id], onDelete: Cascade)
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  country     String
  os          String
  browser     String
  device      String
  createdAt   DateTime  @default(now())
}
